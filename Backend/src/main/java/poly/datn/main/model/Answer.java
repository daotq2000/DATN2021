package poly.datn.main.model;
// Generated Sep 20, 2020 1:19:24 PM by Hibernate Tools 4.0.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Answer generated by hbm2java
 */
@Entity
@Table(name = "answer", catalog = "graduate")
public class Answer implements java.io.Serializable {

	private Long id;
	private User user;
	private Post post;
	private String content;
	private Date createAt;
	private Date updateAt;
	private Set<EmotionAnswer> emotionAnswersForAnswerId = new HashSet<EmotionAnswer>(0);
	private Set<EmotionAnswer> emotionAnswersForPostId = new HashSet<EmotionAnswer>(0);
	private Set<Comment> commentsForPostId = new HashSet<Comment>(0);
	private Set<Comment> commentsForUserId = new HashSet<Comment>(0);
	private Set<EmotionAnswer> emotionAnswersForUserId = new HashSet<EmotionAnswer>(0);

	public Answer() {
	}

	public Answer(User user, Post post, Date createAt, Date updateAt) {
		this.user = user;
		this.post = post;
		this.createAt = createAt;
		this.updateAt = updateAt;
	}

	public Answer(User user, Post post, String content, Date createAt, Date updateAt,
			Set<EmotionAnswer> emotionAnswersForAnswerId, Set<EmotionAnswer> emotionAnswersForPostId,
			Set<Comment> commentsForPostId, Set<Comment> commentsForUserId,
			Set<EmotionAnswer> emotionAnswersForUserId) {
		this.user = user;
		this.post = post;
		this.content = content;
		this.createAt = createAt;
		this.updateAt = updateAt;
		this.emotionAnswersForAnswerId = emotionAnswersForAnswerId;
		this.emotionAnswersForPostId = emotionAnswersForPostId;
		this.commentsForPostId = commentsForPostId;
		this.commentsForUserId = commentsForUserId;
		this.emotionAnswersForUserId = emotionAnswersForUserId;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", nullable = false)
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "post_id", nullable = false)
	public Post getPost() {
		return this.post;
	}

	public void setPost(Post post) {
		this.post = post;
	}

	@Column(name = "content", length = 65535)
	public String getContent() {
		return this.content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "create_at", nullable = false, length = 19)
	public Date getCreateAt() {
		return this.createAt;
	}

	public void setCreateAt(Date createAt) {
		this.createAt = createAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "update_at", nullable = false, length = 19)
	public Date getUpdateAt() {
		return this.updateAt;
	}

	public void setUpdateAt(Date updateAt) {
		this.updateAt = updateAt;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "answerByAnswerId")
	public Set<EmotionAnswer> getEmotionAnswersForAnswerId() {
		return this.emotionAnswersForAnswerId;
	}

	public void setEmotionAnswersForAnswerId(Set<EmotionAnswer> emotionAnswersForAnswerId) {
		this.emotionAnswersForAnswerId = emotionAnswersForAnswerId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "answerByPostId")
	public Set<EmotionAnswer> getEmotionAnswersForPostId() {
		return this.emotionAnswersForPostId;
	}

	public void setEmotionAnswersForPostId(Set<EmotionAnswer> emotionAnswersForPostId) {
		this.emotionAnswersForPostId = emotionAnswersForPostId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "answerByPostId")
	public Set<Comment> getCommentsForPostId() {
		return this.commentsForPostId;
	}

	public void setCommentsForPostId(Set<Comment> commentsForPostId) {
		this.commentsForPostId = commentsForPostId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "answerByUserId")
	public Set<Comment> getCommentsForUserId() {
		return this.commentsForUserId;
	}

	public void setCommentsForUserId(Set<Comment> commentsForUserId) {
		this.commentsForUserId = commentsForUserId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "answerByUserId")
	public Set<EmotionAnswer> getEmotionAnswersForUserId() {
		return this.emotionAnswersForUserId;
	}

	public void setEmotionAnswersForUserId(Set<EmotionAnswer> emotionAnswersForUserId) {
		this.emotionAnswersForUserId = emotionAnswersForUserId;
	}

}
