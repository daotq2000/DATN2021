import { CloseOutlined } from "@ant-design/icons";
import Axios from "axios";
import { Link, useHistory } from "react-router-dom";
import Search from "antd/lib/input/Search";
import React, { useEffect, useState } from "react";
import { Button, Pagination, Table } from "antd";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";
<<<<<<< HEAD:sapo_qlsc_frontend/src/Pages/Accessories/AccessoriesList/index.jsx
import * as getAccessoriesAction from "../../../actions/accessories";
=======
import * as getProductActions from '../../../actions/product';
>>>>>>> dao:sapo_qlsc_frontend/src/Pages/Product/ProductList/index.jsx

const columns = [
  {
    title: "Code",
    dataIndex: "code",
    key: "code",
    render: (code, data) => {
      return <Link to={`/admin/accessories/detail/${data.id}`}>{code}</Link>;
    },
  },
  {
    title: "Linh kiện",
    dataIndex: "name",
    key: "name",
    sorter: true,
  },
  {
    title: "Số lượng",
    dataIndex: "quantity",
    key: "quantity",
  },
  {
    title: "Đơn vị",
    dataIndex: "unit",
    key: "unit",
  },
  {
    title: "Giá mỗi đơn vị",
    dataIndex: "pricePerUnit",
    key: "pricePerUnit",
  },
];

const ProductList = (props) => {
  const history = useHistory();
  const [state, setState] = useState({
    data: [],
    pagination: {
      current: 1,
    },
    loading: false,
  });
  const [stateLoadding, setStateLoadding] = useState({
    selectedRowKeys: [],
    loading: false,
  });
  const [search, setSearch] = useState("");
  const onSelectChange = (selectedRowKeys) => {
    console.log("selectedRowKeys changed: ", selectedRowKeys);
    setStateLoadding(selectedRowKeys);
  };

  const handleTableChange = (pagination, filters, sorter) => {
    console.log(sorter);
  };

  const rowSelection = {
    selectedRowKeys: stateLoadding.selectedRowKeys,
    onChange: onSelectChange,
  };

  const onChange = (pageNumber) => {
    setState({ ...state, pagination: { current: pageNumber } });
  };

  const [checkStrictly] = React.useState(false);
  const { productsActionCreator } = props;
  const { actionGetAccessories } = productsActionCreator;
  useEffect(() => {
    actionGetAccessories(search, state.pagination.current, 7);
  }, [search, actionGetAccessories, state.pagination.current]);
  return (
    <>
      <div style={{ marginBottom: 16 }}>
        <span style={{ marginLeft: 8, fontWeight: "bold", fontSize: 40 }}>
          Linh kiện
        </span>
        <div style={{ float: "right" }}>
          <Search
            placeholder="Nhập tên hoặc mã linh kiện"
            onChange={(event) => {
              setSearch(event.target.value);
            }}
            style={{ width: 250 }}
          />
          <div style={{ display: "inline", margin: 5 }}>
            <Button type="primary" shape="circle">
              <CloseOutlined />
            </Button>
          </div>
          <div style={{ display: "inline", margin: 5 }}>
            <Button
              type="primary"
              onClick={() => history.push("/admin/accessories/create")}
            >
              <span>Thêm linh kiện</span>
            </Button>
          </div>
          {/* <div style={{ display: 'inline', margin: 5 }}>
            <Button type="primary">
              <SortAscendingOutlined />
              <span>Sắp xếp</span>
            </Button>
          </div>
          <div style={{ display: "inline", margin: 5 }}>
            <Button type="primary">
              <SettingOutlined />
              <span>Tùy chỉnh</span>
            </Button>
          </div> */}
        </div>
        <Table
          columns={columns}
          rowSelection={{ ...rowSelection, checkStrictly }}
          dataSource={props.accessories}
          // rowKey={record => record.login.uuid}
          rowKey={(accessories) => accessories.id}
          pagination={false}
          loading={state.loading}
          onChange={handleTableChange}
        />
        <div style={{ float: "right", marginTop: 10 }}>
          <Pagination
            current={state.pagination.current}
            total={props.totalItems}
            onChange={onChange}
            defaultPageSize={7}
          />
        </div>
      </div>
    </>
  );
};

const mapStateToProps = (state) => {
  return {
    accessories: state.accessoriesReducer.content,
    totalItems: state.accessoriesReducer.totalElements,
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    productsActionCreator: bindActionCreators(getAccessoriesAction, dispatch)
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(ProductList);
